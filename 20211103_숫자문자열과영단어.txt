오후 10:49 2021-11-03
[C++] 문자열 찾기: string.find();
---------------------------------------------------
C++에서 문자열을 문자 배열로 변환하는 방법
1) std::basic_string::c_str 메서드를 사용하여 문자열을 Char 배열로 변환
2) std::vector 컨테이너를 사용하여 문자열을 Char 배열로 변환
3) 포인터 조작 작업을 사용하여 문자열을 문자 배열로 변환
출처: Google
----------------------------------------------------
std::string을 char array로 변환하려면

strcpy()를 사용하면 된다!(c_str() 이후!)

예제는 다음과 같다.

std::string tmp = "dog";
char tab2[1024];
strcpy(tab2, tmp.c_str());

출처: https://nine01223.tistory.com/267 [스프링연구소(spring-lab)]
------------------------------------------------------
# C-스트링

- C언어에서 사용해오던 전통적인 문자열로, '\0'으로 끝나는 char타입의 배열을 취급하는 방법이다.

char s[100];
scanf("%s", s);
# string 클래스

- C++ 표준 라이브러리에서 제공하는 클래스로 문자열의 크기를 동적으로 변경 가능하며, Python의 문자열 방식과 비슷하다.

string str = "";

getline(cin, str);    // 문자열 입력받기
cout << str;

str.append("you");    // 문자열 뒤에 문자열 추가하기
cout << str;
cout << str[0];
출처 : https://ldgeao99.tistory.com/220

#include <iostream>
#include <string>
#include <vector>
#include <cctype> -> isdigit 함수를 사용할 때 필요한 헤더파일

https://modoocode.com/241

#include <iostream>

using std::cout;
using std::cin;
using std::endl
using std::string;

bool isNumber(const string& str)
{
    return str.find_first_not_of("0123456789") == string::npos;
}

int main(){
    string str1 = "231524randstr23";
    string str2 = "23152423";
    string str3 = "a3152423";

    isNumber(str1) ? cout << "Number\n" : cout << "Not number\n";
    isNumber(str2) ? cout << "Number\n" : cout << "Not number\n";
    isNumber(str3) ? cout << "Number\n" : cout << "Not number\n";

    return EXIT_SUCCESS;
}

>>BEST Solution
#include <bits/stdc++.h>
using namespace std;

int solution(string s) {
    s = regex_replace(s, regex("zero"), "0");
    s = regex_replace(s, regex("one"), "1");
    s = regex_replace(s, regex("two"), "2");
    s = regex_replace(s, regex("three"), "3");
    s = regex_replace(s, regex("four"), "4");
    s = regex_replace(s, regex("five"), "5");
    s = regex_replace(s, regex("six"), "6");
    s = regex_replace(s, regex("seven"), "7");
    s = regex_replace(s, regex("eight"), "8");
    s = regex_replace(s, regex("nine"), "9");    
    return stoi(s);
//훨씬 간결한 것 같다. 반복문을 여러번 사용한 나의 코드와는 다르게 10회만에 모든 문자를 숫자로 변경이 가능하다. 
//문자가 반복적으로 출력되는 경우에는 굉장히 유리하게 작용할 것 같다.

>>My Solution
#include <iostream>
#include <string>
#include <vector>

using std::cout;
using std::endl;
using std::string;
using std::vector;

int solution(string s) {
    vector<string> numb = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; //vector string 배열로 선언
    int answer = 0; // 정답 변수
    int i = 0; 	// 반복문에서 사용되는 변수 

    //for문을 무한히 돌리는 형태로 구현했다. 0이 두 번 출력되는 경우에는 한 바퀴를 돌고 변환해야 하므로 불필요한 부분이 존재한다. 같은 문자열의 개수가 충분히 커지면 시간이 초과될 수 있다. 따라서 위 BEST Solution을 혼용해서 사용할 필요가 있다.
    while (s.find_first_not_of("1234567890") != string::npos){ //(isNumber(s) == 0){ //원래는 외부에서 선언하는 함수를 가져와서 사용했었다. 
								     //그런데 불필요해 보여서 메인함수 안에서 선언하는 것으로 변경했다.
        if (i > 10){ // 0으로 돌려줌 (문자열이 중복으로 존재하는 경우 반복적으로 처리하기 위해 0으로 리셋
            i = 0;
        }

        if (s.find(numb[i]) != string::npos){ // 문자열의 시작위치 != 18446744073709551615 (18,446,744,073,709,551,615의 값 즉 -1)
				  // -1(위치가 존재하지 않으면 -1을 반환한다.)이 더 직관적인 것 같다.
            s.replace(s.find(numb[i]), numb[i].length(), std::to_string(i + 0)); // 문자열.replace(문자열 위치, numb[i] 문자열 길이, 변환할 문자열)
        }

        i++; //1씩 증가
    }

    answer = stoi(s); //문자열을 정수로 변환
    return answer;
}

오전 1:21 2021-11-04 문제 풀이 완료 시각
오전 1:44 2021-11-04 주석 완료 시각